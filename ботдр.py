import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import sqlite3
from datetime import datetime, timedelta
import random
import os
from dotenv import load_dotenv
from flask import Flask  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask
import threading  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('birthdays.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS birthdays (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    date TEXT NOT NULL
)
''')
conn.commit()

# –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
congratulations = [
    "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å —Å—á–∞—Å—Ç—å–µ –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º, –∞ –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –∫—Ä–µ–ø–∫–∏–º! üéâ",
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üéÇ",
    "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è, –∞ –∂–∏–∑–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–æ–π! üåü",
    "–û—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü—É—Å—Ç—å —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üçÄ",
    "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —É–ª—ã–±–∫–∞–º–∏ –∏ —Ç–µ–ø–ª–æ–º! üòä",
]

# Reply-–∫–Ω–æ–ø–∫–∏
def get_reply_keyboard():
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")],
        [KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Job queue: {context.job_queue}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if not hasattr(context, 'job_queue') or context.job_queue is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: job_queue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if not hasattr(context, 'job_started') or not context.job_started:
        chat_id = update.message.chat_id
        context.job_queue.run_repeating(check_birthdays, interval=86400, first=10, chat_id=chat_id)
        context.job_started = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_reply_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω 15-05-1990")
    elif text == "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è":
        await list_birthdays(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    elif text == "–ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            "- –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "- –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "- –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n"
            "—Ç–≥: @diiick\n"
            "email: gridasovaa888@gmail.com"
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
        try:
            args = text.split()
            if len(args) == 2:
                await add_birthday(update, context)
            elif len(args) == 1:
                await delete_birthday(update, context)
        except Exception as e:
            await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /add_birthday
async def add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text
        args = text.split()

        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ò–º—è –î–î-–ú–ú-–ì–ì–ì–ì\n –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω 15-05-1990")
            return

        name = args[0]
        date_str = args[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        try:
            birth_date = datetime.strptime(date_str, '%d-%m-%Y').date()
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        cursor.execute('INSERT INTO birthdays (name, date) VALUES (?, ?)', (name, date_str))
        conn.commit()

        await update.message.reply_text(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} ({date_str}) –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /list
async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().date()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT name, date FROM birthdays')
        rows = cursor.fetchall()

        if not rows:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–µ
        sorted_rows = sorted(rows, key=lambda x: get_next_birthday(x[1], today))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        message = "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ):\n"
        for row in sorted_rows:
            name, date_str = row
            try:
                birth_date = datetime.strptime(date_str, '%d-%m-%Y').date()
                next_birthday = get_next_birthday(date_str, today)
                days_until = (next_birthday - today).days
                message += f"- {name}: {birth_date.strftime('%d-%m-%Y')} (—á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π)\n"
            except ValueError:
                message += f"- {name}: {date_str} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)\n"

        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
def get_next_birthday(date_str: str, today: datetime.date) -> datetime.date:
    birth_date = datetime.strptime(date_str, '%d-%m-%Y').date()
    next_birthday = birth_date.replace(year=today.year)

    # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–µ–ª, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
    if next_birthday < today:
        next_birthday = next_birthday.replace(year=today.year + 1)

    return next_birthday

# –ö–æ–º–∞–Ω–¥–∞ /delete_birthday
async def delete_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        name = update.message.text.strip()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('DELETE FROM birthdays WHERE name = ?', (name,))
        conn.commit()

        if cursor.rowcount > 0:
            await update.message.reply_text(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} —É–¥–∞–ª–µ–Ω!")
        else:
            await update.message.reply_text(f"–ß–µ–ª–æ–≤–µ–∫ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
async def check_birthdays(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)

    # –ò—â–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    cursor.execute('SELECT name, date FROM birthdays')
    for row in cursor.fetchall():
        name, date_str = row
        try:
            birth_date = datetime.strptime(date_str, '%d-%m-%Y').date()
            next_birthday = birth_date.replace(year=today.year)

            # –ï—Å–ª–∏ –≥–æ–¥ —É–∂–µ –ø—Ä–æ—à–µ–ª, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if next_birthday < today:
                next_birthday = next_birthday.replace(year=today.year + 1)

            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞
            if next_birthday == tomorrow:
                age = today.year - birth_date.year
                if birth_date.month > today.month or (birth_date.month == today.month and birth_date.day > today.day):
                    age -= 1

                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                message = (
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}!\n"
                    f"–ò—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è {age} –ª–µ—Ç.\n"
                    f"{random.choice(congratulations)}"
                )
                await context.bot.send_message(chat_id=context.job.chat_id, text=message)
        except ValueError:
            continue

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!", 200

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host='0.0.0.0', port=10000)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram-–±–æ—Ç–∞
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
